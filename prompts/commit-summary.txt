# Git Commit Message Generator

Generate a git commit summary line from the provided diff.

## Basic rules

- The summary line should be 54 characters or less, and
- it must begin with the name of the primary file being modified, but without an extension.
- This should be followed by a colon and space (": ") then a summary of the change.
- The change summary should begin with a verb in active tense, for example: "Fix", "Update", "Add", "Remove" etc.
- The summary can use common abbreviations to keep the line width under 54 characters.
- The summary must capture the intent of the change, and not just restate details of the changes.

## File summary lines

If files "foo.el" and "foo-bar.el" are changed in a commit to add X, the commit message could read

foo: Add support for X

If the changes are across many files and appear to be unconnected or disparate, mention the important ones with commas while staying under 60 characters.  Example:

foo: Add X, fix Y, remove Z from W

Examples of good summary lines:

gptel-integrations: Fix tool-import logic
gptel-bedrock: Add Claude 3-7 Sonnet (#887)
README: Explain difference between GitHub models/copilot
gptel: Reduce Windows curl-file-size-threshold

For each file mentioned in the body of the changelog, examine the git diff relating to that file and add a bullet-list description of the changes being made to each file.

## Git Commit Message Best Practices

Based on conventions from Linux kernel, Git, Angular, Conventional Commits, Node.js, and other major open-source projects, here are the essential guidelines for writing effective commit messages:

1. **Write the subject line in imperative mood, present tense** (e.g., "Add feature" not "Added feature" or "Adds feature"). This matches the format of commits generated by Git commands like `git merge` and `git revert`.

2. **Keep the subject line to 50 characters maximum, with a hard limit of 72 characters**. The subject line appears in logs, email subjects, and Git tools that expect concise first lines.

3. **Separate the subject line from the body with a single blank line**. Many Git tools treat the first line as the commit title and the rest as the body, so this separation is critical for proper parsing.

4. **Capitalize the first word of the subject line, unless using a type prefix** (e.g., "Fix memory leak" or "feat: add user authentication"). When using type/scope prefixes like `feat(api):` or `fix:`, the description after the colon should be lowercase.

5. **Never end the subject line with a period**. The subject line is a title, not a sentence, and periods waste precious characters in the 50-character limit.

6. **Wrap the body text at 72 characters per line**. This ensures readability in various Git tools, terminal windows, and email clients without horizontal scrolling.

7. **Use the body to explain what and why, not how**. Describe the motivation for the change, the problem it solves, and how the new behavior differs from the oldâ€”implementation details belong in code comments.

8. **Optionally prefix commits with a type and scope** using the format `<type>(<scope>): <description>` where type is one of: `feat`, `fix`, `docs`, `style`, `refactor`, `test`, `perf`, `build`, or `ci`. This enables automated changelog generation and semantic versioning.

9. **Reference related issues, pull requests, or commits in the footer** using formats like `Fixes #123`, `Closes #456`, or `Refs: #789` on separate lines after a blank line following the body. For breaking changes, include `BREAKING CHANGE: <description>` in the footer or append `!` after the type/scope.

10. **Make each commit a single logical change** that can be understood, reviewed, and reverted independently. If you find yourself using "and" repeatedly in the subject line, the commit likely needs to be split.

## Example of a well formatted message

Here is an example of what the final product might look like for a realistic set of changes:

<message>
OPNSENSE-EXPORTER-SETUP: Add OPNsense exporter docs, config

- **OPNSENSE-EXPORTER-SETUP.md**: Add comprehensive documentation for OPNsense
  Prometheus exporter setup, including API credential configuration, required
  permissions, SOPS secret format, deployment steps, verification procedures,
  troubleshooting guide, and available metrics reference

- **opnsense-exporter-quadlet.nix**: Add Podman quadlet configuration for
  OPNsense exporter container using
  ghcr.io/athennamind/opnsense-exporter:latest, exposing metrics on
  localhost:9273, with SOPS-encrypted API credentials and temporary insecure
  mode workaround for gateway collector issue

- **quadlet.nix**: Import opnsense-exporter-quadlet module to enable container
  service

- **prometheus-monitoring.nix**: Add "opnsense" scrape job targeting
  localhost:9273 with 30s interval and labels (alias="opnsense-router",
  role="gateway", device_type="router")

- **secrets.yaml**: Add encrypted opnsense-exporter-secrets entry containing
  OPNSENSE_EXPORTER_OPS_API_KEY and OPNSENSE_EXPORTER_OPS_API_SECRET environment
  variables
</message>
